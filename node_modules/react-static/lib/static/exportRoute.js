"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _reactHelmet = _interopRequireDefault(require("react-helmet"));

var _reactUniversalComponent = require("react-universal-component");

var _webpackFlushChunks = _interopRequireDefault(require("webpack-flush-chunks"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _Redirect = _interopRequireDefault(require("./components/Redirect"));

var _plugins = _interopRequireDefault(require("./plugins"));

var _utils = require("../utils");

var _chunkBuilder = require("../utils/chunkBuilder");

var _HtmlWithMeta = _interopRequireDefault(require("./components/HtmlWithMeta"));

var _HeadWithMeta = _interopRequireDefault(require("./components/HeadWithMeta"));

var _BodyWithMeta = _interopRequireDefault(require("./components/BodyWithMeta"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

//
var cachedBasePath;
var cachedHrefReplace;
var cachedSrcReplace;

var _default =
/*#__PURE__*/
function () {
  var _exportRoute = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(state) {
    var _state, config, DocumentTemplate, route, siteData, clientStats, incremental, _state2, Comp, sharedHashesByProp, template, data, sharedData, routePath, remove, removeLocation, basePath, hrefReplace, srcReplace, routeInfo, embeddedRouteInfo, meta, chunkNames, head, clientScripts, clientStyleSheets, clientCss, FinalComp, renderToStringAndExtract, appHtml, RenderedComp, DocumentHtml, html, publicPath, htmlFilename, routeInfoFilename, res;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _state = state, config = _state.config, DocumentTemplate = _state.DocumentTemplate, route = _state.route, siteData = _state.siteData, clientStats = _state.clientStats, incremental = _state.incremental;
            _state2 = state, Comp = _state2.Comp;
            sharedHashesByProp = route.sharedHashesByProp, template = route.template, data = route.data, sharedData = route.sharedData, routePath = route.path, remove = route.remove;

            if (!(incremental && remove)) {
              _context.next = 8;
              break;
            }

            if (!(route.path === '404' || route.path === '/')) {
              _context.next = 6;
              break;
            }

            throw new Error("You are attempting to incrementally remove the ".concat(route.path === '404' ? '404' : 'index', " route from your export. This is currently not supported (or recommended) by React Static."));

          case 6:
            removeLocation = _path["default"].join(config.paths.DIST, route.path);
            return _context.abrupt("return", _fsExtra["default"].remove(removeLocation));

          case 8:
            basePath = cachedBasePath || (cachedBasePath = config.basePath);
            hrefReplace = cachedHrefReplace || (cachedHrefReplace = new RegExp("(href=[\"'])\\/(".concat(basePath ? "".concat(basePath, "\\/") : '', ")?([^\\/])"), 'gm'));
            srcReplace = cachedSrcReplace || (cachedSrcReplace = new RegExp("(src=[\"'])\\/(".concat(basePath ? "".concat(basePath, "\\/") : '', ")?([^\\/])"), 'gm')); // This routeInfo will be saved to disk. It should only include the
            // data and hashes to construct all of the props later.

            routeInfo = {
              template: template,
              sharedHashesByProp: sharedHashesByProp,
              data: data,
              path: routePath // This embeddedRouteInfo will be inlined into the HTML for this route.
              // It should include all of the data, including shared data

            };
            embeddedRouteInfo = _objectSpread({}, routeInfo, {
              sharedData: sharedData,
              siteData: siteData
            });
            state = _objectSpread({}, state, {
              routeInfo: routeInfo,
              embeddedRouteInfo: embeddedRouteInfo // Make a place to collect chunks, meta info and head tags

            });
            meta = {};
            chunkNames = [];
            head = {};
            clientScripts = [];
            clientStyleSheets = [];
            clientCss = {};
            // Get the react component from the Comp and pass it the export context. This
            // uses reactContext under the hood to pass down the exportContext, since
            // react's new context api doesn't survive across bundling.
            Comp = config.disableRuntime ? Comp : Comp(embeddedRouteInfo);

            if (route.redirect) {
              FinalComp = function FinalComp() {
                return _react["default"].createElement(_Redirect["default"], {
                  fromPath: route.path,
                  to: route.redirect
                });
              };
            } else {
              FinalComp = function FinalComp(props) {
                return _react["default"].createElement(_reactUniversalComponent.ReportChunks, {
                  report: function report(chunkName) {
                    // if we are building to a absolute path we must make the detected
                    // chunkName relative and matching to the one we set in
                    // generateTemplates
                    if (!config.paths.DIST.startsWith(config.paths.ROOT)) {
                      chunkName = (0, _chunkBuilder.absoluteToRelativeChunkName)(config.paths.ROOT, chunkName);
                    }

                    chunkNames.push(chunkName);
                  }
                }, _react["default"].createElement(Comp, props));
              };
            }

            renderToStringAndExtract = function renderToStringAndExtract(comp) {
              // Rend the app to string!
              var appHtml = (0, _server.renderToString)(comp);

              var _flushChunks = (0, _webpackFlushChunks["default"])(clientStats, {
                chunkNames: chunkNames,
                outputPath: config.paths.DIST
              }),
                  scripts = _flushChunks.scripts,
                  stylesheets = _flushChunks.stylesheets,
                  css = _flushChunks.css;

              clientScripts = scripts;
              clientStyleSheets = stylesheets;
              clientCss = css; // Extract head calls using Helmet synchronously right after renderToString
              // to not introduce any race conditions in the meta data rendering

              var helmet = _reactHelmet["default"].renderStatic();

              head = {
                htmlProps: helmet.htmlAttributes.toComponent(),
                bodyProps: helmet.bodyAttributes.toComponent(),
                base: helmet.base.toComponent(),
                link: helmet.link.toComponent(),
                meta: helmet.meta.toComponent(),
                noscript: helmet.noscript.toComponent(),
                script: helmet.script.toComponent(),
                style: helmet.style.toComponent(),
                title: helmet.title.toComponent()
              };
              return appHtml;
            };

            state = _objectSpread({}, state, {
              meta: meta
            });
            _context.prev = 24;
            _context.next = 27;
            return _plugins["default"].beforeRenderToElement(FinalComp, state);

          case 27:
            FinalComp = _context.sent;

            if (!config.renderToElement) {
              _context.next = 30;
              break;
            }

            throw new Error("config.renderToElement has been deprecated in favor of the " + "'beforeRenderToElement' or 'beforeRenderToHtml' hooks instead.");

          case 30:
            RenderedComp = _react["default"].createElement(FinalComp, null); // Run the beforeRenderToHtml hook
            // Rum the Html hook

            _context.next = 33;
            return _plugins["default"].beforeRenderToHtml(RenderedComp, state);

          case 33:
            RenderedComp = _context.sent;

            if (!config.renderToHtml) {
              _context.next = 36;
              break;
            }

            throw new Error("config.renderToHtml has been deprecated in favor of the " + "'beforeRenderToHtml' or 'beforeHtmlToDocument' hooks instead.");

          case 36:
            appHtml = renderToStringAndExtract(RenderedComp);
            _context.next = 39;
            return _plugins["default"].beforeHtmlToDocument(appHtml, state);

          case 39:
            appHtml = _context.sent;
            _context.next = 47;
            break;

          case 42:
            _context.prev = 42;
            _context.t0 = _context["catch"](24);

            if (_context.t0.then) {
              _context.t0.message = 'Components are not allowed to suspend during static export. Please ' + 'make its data available synchronously and try again!';
            }

            _context.t0.message = "Failed exporting HTML for URL ".concat(route.path, " (").concat(route.template, "): ").concat(_context.t0.message);
            throw _context.t0;

          case 47:
            state = _objectSpread({}, state, {
              head: head,
              clientScripts: clientScripts,
              clientStyleSheets: clientStyleSheets,
              clientCss: clientCss
            });
            _context.t1 = _server.renderToStaticMarkup;
            _context.t2 = _react["default"];
            _context.t3 = DocumentTemplate;
            _context.next = 53;
            return (0, _HtmlWithMeta["default"])(state);

          case 53:
            _context.t4 = _context.sent;
            _context.next = 56;
            return (0, _HeadWithMeta["default"])(state);

          case 56:
            _context.t5 = _context.sent;
            _context.next = 59;
            return (0, _BodyWithMeta["default"])(state);

          case 59:
            _context.t6 = _context.sent;
            _context.t7 = state;
            _context.t8 = {
              Html: _context.t4,
              Head: _context.t5,
              Body: _context.t6,
              state: _context.t7
            };
            _context.t9 = _react["default"].createElement("div", {
              id: "root",
              dangerouslySetInnerHTML: {
                __html: appHtml
              }
            });
            _context.t10 = _context.t2.createElement.call(_context.t2, _context.t3, _context.t8, _context.t9);
            DocumentHtml = (0, _context.t1)(_context.t10);
            // Render the html for the page inside of the base document.
            html = "<!DOCTYPE html>".concat(DocumentHtml);
            _context.next = 68;
            return _plugins["default"].beforeDocumentToFile(html, state);

          case 68:
            html = _context.sent;
            // If the siteRoot is set and we're not in staging, prefix all absolute URLs
            // with the siteRoot
            publicPath = (0, _utils.makePathAbsolute)(process.env.REACT_STATIC_PUBLIC_PATH);

            if (process.env.REACT_STATIC_DISABLE_ROUTE_PREFIXING !== 'true') {
              html = html.replace(hrefReplace, "$1".concat(publicPath, "$3"));
            }

            html = html.replace(srcReplace, "$1".concat(publicPath, "$3")); // If the route is a 404 page, write it directly to 404.html, instead of
            // inside a directory.

            htmlFilename = route.path === '404' ? _path["default"].join(config.paths.DIST, '404.html') : _path["default"].join(config.paths.DIST, route.path, 'index.html'); // Make the routeInfo sit right next to its companion html file

            routeInfoFilename = _path["default"].join(config.paths.DIST, route.path, 'routeInfo.json');
            _context.next = 76;
            return Promise.all([_fsExtra["default"].outputFile(htmlFilename, html), !route.redirect ? _fsExtra["default"].outputJson(routeInfoFilename, routeInfo) : Promise.resolve()]);

          case 76:
            res = _context.sent;
            return _context.abrupt("return", res);

          case 78:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[24, 42]]);
  }));

  function exportRoute(_x) {
    return _exportRoute.apply(this, arguments);
  }

  return exportRoute;
}();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,