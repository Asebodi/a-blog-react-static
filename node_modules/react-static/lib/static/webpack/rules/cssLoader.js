"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _autoprefixer = _interopRequireDefault(require("autoprefixer"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _postcssFlexbugsFixes = _interopRequireDefault(require("postcss-flexbugs-fixes"));

function initCSSLoader() {
  var cssLoader = [{
    loader: 'css-loader',
    options: {
      importLoaders: 1,
      sourceMap: false
    }
  }, {
    loader: 'postcss-loader',
    options: {
      // Necessary for external CSS imports to work
      // https://github.com/facebookincubator/create-react-app/issues/2677
      sourceMap: true,
      ident: 'postcss',
      plugins: function plugins() {
        return [_postcssFlexbugsFixes["default"], (0, _autoprefixer["default"])({
          flexbox: 'no-2009' // I'd opt in for this - safari 9 & IE 10.

        })];
      }
    }
  }];
  return cssLoader;
}

function _default(_ref) {
  var stage = _ref.stage,
      isNode = _ref.isNode;
  var cssLoader = initCSSLoader();

  if (stage === 'node' || isNode) {
    return {
      test: /\.css$/,
      loader: cssLoader
    };
  }

  cssLoader = [{
    loader: _extractCssChunksWebpackPlugin["default"].loader,
    options: {
      hot: true
    }
  }].concat((0, _toConsumableArray2["default"])(cssLoader)); // seeing as it's HMR, why not :)

  return {
    test: /\.css$/,
    loader: cssLoader
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdGF0aWMvd2VicGFjay9ydWxlcy9jc3NMb2FkZXIuanMiXSwibmFtZXMiOlsiaW5pdENTU0xvYWRlciIsImNzc0xvYWRlciIsImxvYWRlciIsIm9wdGlvbnMiLCJpbXBvcnRMb2FkZXJzIiwic291cmNlTWFwIiwiaWRlbnQiLCJwbHVnaW5zIiwicG9zdGNzc0ZsZXhidWdzRml4ZXMiLCJmbGV4Ym94Iiwic3RhZ2UiLCJpc05vZGUiLCJ0ZXN0IiwiRXh0cmFjdENzc0NodW5rcyIsImhvdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxTQUFTQSxhQUFULEdBQXlCO0FBQ3ZCLE1BQU1DLFNBQVMsR0FBRyxDQUNoQjtBQUNFQyxJQUFBQSxNQUFNLEVBQUUsWUFEVjtBQUVFQyxJQUFBQSxPQUFPLEVBQUU7QUFDUEMsTUFBQUEsYUFBYSxFQUFFLENBRFI7QUFFUEMsTUFBQUEsU0FBUyxFQUFFO0FBRko7QUFGWCxHQURnQixFQVFoQjtBQUNFSCxJQUFBQSxNQUFNLEVBQUUsZ0JBRFY7QUFFRUMsSUFBQUEsT0FBTyxFQUFFO0FBQ1A7QUFDQTtBQUNBRSxNQUFBQSxTQUFTLEVBQUUsSUFISjtBQUlQQyxNQUFBQSxLQUFLLEVBQUUsU0FKQTtBQUtQQyxNQUFBQSxPQUFPLEVBQUU7QUFBQSxlQUFNLENBQ2JDLGdDQURhLEVBRWIsOEJBQWE7QUFDWEMsVUFBQUEsT0FBTyxFQUFFLFNBREUsQ0FDUzs7QUFEVCxTQUFiLENBRmEsQ0FBTjtBQUFBO0FBTEY7QUFGWCxHQVJnQixDQUFsQjtBQXdCQSxTQUFPUixTQUFQO0FBQ0Q7O0FBRWMsd0JBQTRCO0FBQUEsTUFBakJTLEtBQWlCLFFBQWpCQSxLQUFpQjtBQUFBLE1BQVZDLE1BQVUsUUFBVkEsTUFBVTtBQUN6QyxNQUFJVixTQUFTLEdBQUdELGFBQWEsRUFBN0I7O0FBQ0EsTUFBSVUsS0FBSyxLQUFLLE1BQVYsSUFBb0JDLE1BQXhCLEVBQWdDO0FBQzlCLFdBQU87QUFDTEMsTUFBQUEsSUFBSSxFQUFFLFFBREQ7QUFFTFYsTUFBQUEsTUFBTSxFQUFFRDtBQUZILEtBQVA7QUFJRDs7QUFFREEsRUFBQUEsU0FBUyxJQUNQO0FBQ0VDLElBQUFBLE1BQU0sRUFBRVcsMENBQWlCWCxNQUQzQjtBQUVFQyxJQUFBQSxPQUFPLEVBQUU7QUFDUFcsTUFBQUEsR0FBRyxFQUFFO0FBREU7QUFGWCxHQURPLDZDQU9KYixTQVBJLEVBQVQsQ0FUeUMsQ0FpQnZDOztBQUVGLFNBQU87QUFDTFcsSUFBQUEsSUFBSSxFQUFFLFFBREQ7QUFFTFYsSUFBQUEsTUFBTSxFQUFFRDtBQUZILEdBQVA7QUFJRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhdXRvcHJlZml4ZXIgZnJvbSAnYXV0b3ByZWZpeGVyJ1xyXG5pbXBvcnQgRXh0cmFjdENzc0NodW5rcyBmcm9tICdleHRyYWN0LWNzcy1jaHVua3Mtd2VicGFjay1wbHVnaW4nXHJcbmltcG9ydCBwb3N0Y3NzRmxleGJ1Z3NGaXhlcyBmcm9tICdwb3N0Y3NzLWZsZXhidWdzLWZpeGVzJ1xyXG5cclxuZnVuY3Rpb24gaW5pdENTU0xvYWRlcigpIHtcclxuICBjb25zdCBjc3NMb2FkZXIgPSBbXHJcbiAgICB7XHJcbiAgICAgIGxvYWRlcjogJ2Nzcy1sb2FkZXInLFxyXG4gICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgaW1wb3J0TG9hZGVyczogMSxcclxuICAgICAgICBzb3VyY2VNYXA6IGZhbHNlLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbG9hZGVyOiAncG9zdGNzcy1sb2FkZXInLFxyXG4gICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgLy8gTmVjZXNzYXJ5IGZvciBleHRlcm5hbCBDU1MgaW1wb3J0cyB0byB3b3JrXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHAvaXNzdWVzLzI2NzdcclxuICAgICAgICBzb3VyY2VNYXA6IHRydWUsXHJcbiAgICAgICAgaWRlbnQ6ICdwb3N0Y3NzJyxcclxuICAgICAgICBwbHVnaW5zOiAoKSA9PiBbXHJcbiAgICAgICAgICBwb3N0Y3NzRmxleGJ1Z3NGaXhlcyxcclxuICAgICAgICAgIGF1dG9wcmVmaXhlcih7XHJcbiAgICAgICAgICAgIGZsZXhib3g6ICduby0yMDA5JywgLy8gSSdkIG9wdCBpbiBmb3IgdGhpcyAtIHNhZmFyaSA5ICYgSUUgMTAuXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICBdXHJcbiAgcmV0dXJuIGNzc0xvYWRlclxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih7IHN0YWdlLCBpc05vZGUgfSkge1xyXG4gIGxldCBjc3NMb2FkZXIgPSBpbml0Q1NTTG9hZGVyKClcclxuICBpZiAoc3RhZ2UgPT09ICdub2RlJyB8fCBpc05vZGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRlc3Q6IC9cXC5jc3MkLyxcclxuICAgICAgbG9hZGVyOiBjc3NMb2FkZXIsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjc3NMb2FkZXIgPSBbXHJcbiAgICB7XHJcbiAgICAgIGxvYWRlcjogRXh0cmFjdENzc0NodW5rcy5sb2FkZXIsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBob3Q6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgLi4uY3NzTG9hZGVyLFxyXG4gIF0gLy8gc2VlaW5nIGFzIGl0J3MgSE1SLCB3aHkgbm90IDopXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB0ZXN0OiAvXFwuY3NzJC8sXHJcbiAgICBsb2FkZXI6IGNzc0xvYWRlcixcclxuICB9XHJcbn1cclxuIl19