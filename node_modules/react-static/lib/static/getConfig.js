"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getConfig;
exports.buildConfig = buildConfig;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _utils = require("../utils");

var _plugins = _interopRequireWildcard(require("./plugins"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// the default static.config.js location
var defaultConfig = {};
var DEFAULT_NAME_FOR_STATIC_CONFIG_FILE = 'static.config.js';

var DEFAULT_PATH_FOR_STATIC_CONFIG = _path["default"].resolve(_path["default"].join(process.cwd(), DEFAULT_NAME_FOR_STATIC_CONFIG_FILE));

var DEFAULT_ROUTES = [{
  path: '/'
}];
var DEFAULT_ENTRY = 'index.js';
var DEFAULT_EXTENSIONS = ['.js', '.jsx']; // Retrieves the static.config.js from the current project directory

function getConfig(state) {
  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (config) {
    if (state.debug) {
      console.log('getConfig():');
      console.log(state);
    }

    return config;
  };
  var configPath = state.configPath || state.packageConfig.config || DEFAULT_PATH_FOR_STATIC_CONFIG;
  state = _objectSpread({}, state, {
    originalConfig: configPath
  });

  var resolvedPath = _path["default"].resolve(configPath);

  var noConfig = configPath === DEFAULT_PATH_FOR_STATIC_CONFIG && !resolvedPath;

  if (noConfig) {
    // last
    state = buildConfig(state, defaultConfig);
    return callback(state);
  }

  state = buildConfigFromPath(state, resolvedPath || configPath);

  if (state.stage === 'dev') {
    _chokidar["default"].watch(resolvedPath, {
      ignoreInitial: true
    }).on('all',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.log('');
              console.log("Updating static.config.js");
              state = buildConfigFromPath(state, resolvedPath);
              callback(state);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  }

  return callback(state);
}

function buildConfigFromPath(state, configPath) {
  delete require.cache[configPath];

  var config = require(configPath)["default"];

  return buildConfig(state, config);
}

function buildConfig(state) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Default Paths
  var paths = _objectSpread({
    root: _path["default"].resolve(process.cwd()),
    src: 'src',
    dist: 'dist',
    temp: 'tmp',
    buildArtifacts: 'artifacts',
    devDist: 'tmp/dev-server',
    "public": 'public',
    plugins: 'plugins',
    pages: 'src/pages',
    nodeModules: 'node_modules',
    assets: ''
  }, config.paths || {}); // Use the root to resolve all other relative paths


  var resolvePath = function resolvePath(relativePath) {
    return _path["default"].resolve(paths.root, relativePath);
  }; // Resolve and replace all pathss


  var DIST = process.env.REACT_STATIC_ENV === 'development' ? resolvePath(paths.devDist || paths.dist) : resolvePath(paths.dist);

  var ASSETS = _path["default"].resolve(DIST, paths.assets);

  paths = {
    ROOT: paths.root,
    SRC: resolvePath(paths.src),
    DIST: DIST,
    ASSETS: ASSETS,
    PLUGINS: resolvePath(paths.plugins),
    TEMP: resolvePath(paths.temp),
    ARTIFACTS: resolvePath(paths.buildArtifacts),
    PUBLIC: resolvePath(paths["public"]),
    NODE_MODULES: resolvePath(paths.nodeModules),
    EXCLUDE_MODULES: paths.excludeResolvedModules || resolvePath(paths.nodeModules),
    PACKAGE: resolvePath('package.json'),
    HTML_TEMPLATE: _path["default"].join(DIST, 'index.html'),
    STATIC_DATA: _path["default"].join(ASSETS, 'staticData') // siteRoot, basePath, publicPath, and assetPath resolution

  };
  var siteRoot = '';
  var basePath = '';
  var assetsPath = '';

  if (process.env.REACT_STATIC_ENV === 'development') {
    basePath = (0, _utils.cleanSlashes)(config.devBasePath);
    assetsPath = config.devAssetsPath || paths.assets || assetsPath;
  } else if (state.staging) {
    siteRoot = (0, _utils.cutPathToRoot)(config.stagingSiteRoot || '/', '$1');
    basePath = (0, _utils.cleanSlashes)(config.stagingBasePath);
    assetsPath = config.stagingAssetsPath || paths.assets || assetsPath;
  } else {
    siteRoot = (0, _utils.cutPathToRoot)(config.siteRoot || '/', '$1');
    basePath = (0, _utils.cleanSlashes)(config.basePath);
    assetsPath = config.assetsPath || paths.assets || assetsPath;
  }

  var publicPath = "".concat((0, _utils.cleanSlashes)("".concat(siteRoot, "/").concat(basePath), {
    leading: false
  }), "/");

  if (assetsPath && !(0, _utils.isAbsoluteUrl)(assetsPath)) {
    assetsPath = "/".concat((0, _utils.cleanSlashes)("".concat(basePath, "/").concat(assetsPath)), "/");
  } // add trailing slash only if assetsPath was supplied, but no trailing slash


  if (assetsPath && !assetsPath.endsWith('/')) {
    assetsPath = "".concat(assetsPath, "/");
  } // Add the project root as a plugin. This allows the dev
  // to use the plugin api directory in their project if they want


  var plugins = [].concat((0, _toConsumableArray2["default"])(config.plugins || []), [paths.ROOT]); // if (process.env.NODE_ENV !== 'test' && !entry) {
  //   throw new Error(
  //     `Could not resolve entry file from location: ${entry} using extensions: ${(
  //       config.extensions || DEFAULT_EXTENSIONS
  //     ).join(', ')}`
  //   )
  // }
  // Defaults

  config = _objectSpread({
    // Defaults
    getSiteData: function getSiteData() {
      return {};
    },
    prefetchRate: 5,
    maxThreads: Infinity,
    disableRoutePrefixing: false,
    outputFileRate: 100,
    extensions: DEFAULT_EXTENSIONS,
    getRoutes: function () {
      var _getRoutes = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", DEFAULT_ROUTES);

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getRoutes() {
        return _getRoutes.apply(this, arguments);
      }

      return getRoutes;
    }(),
    minLoadTime: 200,
    disablePreload: false,
    disableRuntime: false,
    preloadPollInterval: 300,
    productionSourceMaps: false,
    entry: DEFAULT_ENTRY
  }, config, {
    // Materialized Overrides
    paths: paths,
    plugins: plugins,
    siteRoot: siteRoot,
    basePath: basePath,
    publicPath: publicPath,
    assetsPath: assetsPath,
    extractCssChunks: config.extractCssChunks || false,
    inlineCss: config.inlineCss || false,
    babelExcludes: config.babelExcludes || [],
    devServer: _objectSpread({
      host: 'localhost',
      port: 3000
    }, config.devServer || {})
  });
  config.terser = config.terser || {};
  config.terser.terserOptions = config.terser.terserOptions || {};
  config.terser.terserOptions.mangle = config.terser.terserOptions.mangle || {};
  config.terser.terserOptions.parse = config.terser.terserOptions.parse || {};
  config.terser.terserOptions.compress = config.terser.terserOptions.compress || {};
  config.terser.terserOptions.output = config.terser.terserOptions.output || {}; // Set env variables to be used client side

  process.env.REACT_STATIC_MIN_LOAD_TIME = config.minLoadTime;
  process.env.REACT_STATIC_PREFETCH_RATE = config.prefetchRate;
  process.env.REACT_STATIC_DISABLE_ROUTE_PREFIXING = config.disableRoutePrefixing;
  process.env.REACT_STATIC_DISABLE_PRELOAD = config.disablePreload;
  process.env.REACT_STATIC_DISABLE_RUNTIME = config.disableRuntime;
  process.env.REACT_STATIC_PRELOAD_POLL_INTERVAL = config.preloadPollIntervalw;
  process.env.REACT_STATIC_ROOT_PATH_READ_ONLY = paths.ROOT;
  process.env.REACT_STATIC_TEMPLATES_PATH = _path["default"].join(paths.ARTIFACTS, 'react-static-templates.js');
  process.env.REACT_STATIC_PLUGINS_PATH = _path["default"].join(paths.ARTIFACTS, 'react-static-browser-plugins.js');
  process.env.REACT_STATIC_UNIVERSAL_PATH = require.resolve('react-universal-component');

  var resolvePlugin = function resolvePlugin(originalLocation) {
    var options = {};

    if (Array.isArray(originalLocation)) {
      options = originalLocation[1] || {};
      originalLocation = originalLocation[0];
    }

    var location = [function () {
      // Absolute require
      try {
        var found = require.resolve(originalLocation);

        return found.includes('.') ? _path["default"].resolve(found, '../') : found;
      } catch (err) {//
      }
    }, function () {
      // Absolute
      if (_fsExtra["default"].pathExistsSync(originalLocation)) {
        return originalLocation;
      }
    }, function () {
      // Plugins Dir
      var found = _path["default"].resolve(paths.PLUGINS, originalLocation);

      if (_fsExtra["default"].pathExistsSync(found)) {
        return found;
      }
    }, function () {
      // Plugins Dir require
      try {
        var found = (0, _resolveFrom["default"])(paths.PLUGINS, originalLocation);
        return found.includes('.') ? _path["default"].resolve(found, '../') : found;
      } catch (err) {//
      }
    }, function () {
      // CWD
      var found = _path["default"].resolve(process.cwd(), originalLocation);

      if (_fsExtra["default"].pathExistsSync(found)) {
        return found;
      }
    }, function () {
      // CWD require
      try {
        var found = (0, _resolveFrom["default"])(process.cwd(), originalLocation);
        return found.includes('.') ? _path["default"].resolve(found, '../') : found;
      } catch (err) {//
      }
    }, function () {
      if (process.env.NODE_ENV === 'test') {
        // Allow plugins to be mocked
        return require('path').resolve('./src/static/__mocks__/mock-plugin');
      }
    }].reduce(function (prev, curr) {
      return prev || curr();
    }, null); // TODO: We have to do this because we don't have a good mock for process.cwd() :(

    if (!location) {
      throw new Error("Could not find a plugin directory for the plugin: \"".concat(originalLocation, "\". We must bail!"));
    }

    var nodeLocation = _path["default"].join(location, 'node.api.js');

    var browserLocation = _path["default"].join(location, 'browser.api.js'); // Detect if the node plugin entry exists, and provide the nodeResolver to it


    nodeLocation = _fsExtra["default"].pathExistsSync(nodeLocation) ? nodeLocation : null; // Detect if the browser plugin entry exists, and provide the nodeResolver to it

    browserLocation = _fsExtra["default"].pathExistsSync(browserLocation) ? browserLocation : null;

    var buildPluginHooks = function buildPluginHooks() {
      return {};
    };

    try {
      // Get the hooks for the node api
      if (nodeLocation) {
        buildPluginHooks = require(nodeLocation)["default"];
      } else if (originalLocation !== paths.ROOT && !browserLocation) {
        throw new Error("Could not find a valid node.api.js or browser.api.js plugin file in \"".concat(location, "\". \n") + "The original location: \"".concat(originalLocation, "\". \n") + "The root location: \"".concat(paths.ROOT, "\"."));
      }

      var resolvedPlugin = {
        location: location,
        nodeLocation: nodeLocation,
        browserLocation: browserLocation,
        options: options,
        hooks: buildPluginHooks(options) || {}
      };
      (0, _plugins.validatePlugin)(resolvedPlugin); // Recursively resolve plugins

      if (resolvedPlugin.plugins) {
        resolvedPlugin.plugins = resolvedPlugin.plugins.map(resolvePlugin);
      }

      return resolvedPlugin;
    } catch (err) {
      console.error("The following error occurred in the plugin: \"".concat(originalLocation, "\""));
      throw err;
    }
  };

  state = _objectSpread({}, state, {
    plugins: config.plugins.map(resolvePlugin),
    config: config
  });
  return _plugins["default"].afterGetConfig(state);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,